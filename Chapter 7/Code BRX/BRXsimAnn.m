 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This function runs a simulated annealing process
% to find the best fit for the model
% It uses the simAnnOpt structure generated by
% generate_sim_ann_options
% BRXsimAnnVars = BRXsimAnn(simAnnOpt)

function BRXsimAnnVars = BRXsimAnn(simAnnOpt)

%% Print initial time
fprintf('Simulated Annealing BRX\n');
fprintf('Beginning time: %s\n', datestr(now,'HH:MM'));
iter = 1;
discrepancy{1} = [0 0];
delta_discrepancy{1} = 0;

tp = 1;

% Initalise all the variables
initialiseBRX_SA;

% Assign variables from the option structure passed to the function
for par_c = 1:length(simAnnOpt.param_names)
    
    eval(strcat( simAnnOpt.param_names{par_c}, '=', num2str(simAnnOpt.init_values{par_c}) ,';'));
    eval(strcat( 'BRXsimAnnVars(1).param', num2str(par_c),'=', simAnnOpt.param_names{par_c} ,';'));

end
 
%temperature = start_temperature*(1.5).^(-[1:maxSteps+1]);

while iter <= simAnnOpt.max_steps
     
 fprintf('Iteration %1.0f', iter);
 
 % Random vector: paramter multiplier
 rnp = simAnnOpt.rnd_prop(iter,:); 
 p = unifrnd(0,1); 
   
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 for trial_num = 1:simAnnOpt.max_trials
  initialiseBRX_SA; % Initialise all variables
  
  runBRX;        % Run BRX Simulation
  
  % record performances
  performances_TE(trial_num) = sum(performances.TE);
  performances_PRE(trial_num) = sum(performances.PRE);
  performances_PRU(trial_num) = sum(performances.PRU);
  performances_PRSRE(trial_num) = sum(performances.PRSRE);
  fprintf('.');
 end
 
 performances_mean.TE = trimmean(performances_TE,10);
 performances_mean.PRE = trimmean(performances_PRE,10);
 performances_mean.PRU = trimmean(performances_PRU,10);
 performances_mean.PRSRE = trimmean(performances_PRSRE,10);

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  % Calculate discrepancy with target measures
 
 discrepancy{iter}(1) = discrepancy_with_penaliser('linnorm',performances_mean.TE, simAnnOpt.TEmean, simAnnOpt.TEstd, 0);
 discrepancy{iter}(2) = discrepancy_with_penaliser('linnorm',performances_mean.PRE,simAnnOpt.PREmean, simAnnOpt.PREstd, 0);    
 discrepancy{iter}(3) = discrepancy_with_penaliser('linnorm',performances_mean.PRU,simAnnOpt.PRUmean, simAnnOpt.PRUstd, 0);  
 discrepancy{iter}(4) = discrepancy_with_penaliser('linnorm',performances_mean.PRSRE, simAnnOpt.PRSREmean, simAnnOpt.PRSREstd, 0); 
 
 % Computes discrepancy
 if iter > 1
  delta_discrepancy{iter} = norm(discrepancy{iter}) - norm(discrepancy{iter-1});
 else
  delta_discrepancy{iter} = norm(discrepancy{iter}) - 0;
 end 

 % Register outcome
 BRXsimAnnVars(iter).TE = performances_mean.TE;
 BRXsimAnnVars(iter).PRE = performances_mean.PRE;
 BRXsimAnnVars(iter).PRU = performances_mean.PRU;
 BRXsimAnnVars(iter).PRSRE = performances_mean.PRSRE;
 BRXsimAnnVars(iter).trials = counter.trial_num - 1;
 
 % Register parameter values
 for par_c = 1:length(simAnnOpt.param_names)
     eval(strcat( 'BRXsimAnnVars(',num2str(iter),').param', num2str(par_c),'=', simAnnOpt.param_names{par_c} ,';'));
 end
 
 % Register discrepancies
 BRXsimAnnVars(iter).discrepancy = discrepancy{iter};
 BRXsimAnnVars(iter).discrepancy_norm = norm(discrepancy{iter});
 BRXsimAnnVars(iter).discrepancy_mean = mean(discrepancy{iter});
 BRXsimAnnVars(iter).delta_discrepancy = delta_discrepancy{iter};
 
 % Simulated annealing 
 if delta_discrepancy{iter} < 0  % if there's an improvement
  
  % Move across the parameter space (randomly)
  for par_c = 1:length(simAnnOpt.param_names)
   eval(strcat( simAnnOpt.param_names{par_c}, '=', num2str(rnp(par_c)),'*BRXsimAnnVars(',num2str(iter),').param', num2str(par_c),';' ));
  end
 else    % if there is no improvement
  if p < exp(- delta_discrepancy{iter}/simAnnOpt.temperature(tp)) || iter <= 1
   fprintf('Annealing...');
   % Move across the parameter space (randomly)
   for par_c = 1:length(simAnnOpt.param_names)
    eval(strcat( simAnnOpt.param_names{par_c}, '=', num2str(rnp(par_c)), '*BRXsimAnnVars(', num2str(iter),').param', num2str(par_c), ';' ));
   end
  else
   % Move across the parameter space (randomly)
   for par_c = 1:length(simAnnOpt.param_names)
    eval(strcat( simAnnOpt.param_names{par_c}, '=',  num2str(rnp(par_c)), '*BRXsimAnnVars(',num2str(iter-1),').param', num2str(par_c), ';' ));
   end
  end
  tp = tp + 1;
 end
 
 fprintf('completed. ');
 fprintf('Discrepancy norm: %2.2f', norm(discrepancy{iter}));
 fprintf(' (mean = : %2.2f) \n', mean(discrepancy{iter}));
 
 % Interrupt if discrepancy is small enough
 if norm(discrepancy{iter}) < simAnnOpt.stop_if_discrepancy
  fprintf('...interrupted.');
  beep 
  break;
 end
 
 iter = iter + 1; 
   
end

%% Print results and save

 fprintf('\nSimulated Annealing BRX completed\n');
 fprintf('Ending time: %s\n', datestr(now,'HH:MM'));
 
end


